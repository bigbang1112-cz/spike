@using GBX.NET.Engines.Game;
@inject IJSRuntime JS;
@using System.Runtime.InteropServices.JavaScript;
@using Spike.Client.Modules;

@inherits ToolComponentBase

<div class="container">
    <h2>
        Spike
    </h2>
    <div class="wrapper">
        <div class="main rectangle">
            <canvas id="spike-chart"></canvas>
        </div>
    </div>
</div>

@code {
    //
    // Prefer doing logic/calculations/anything-nonvisual outside this component (preferably through SpikeTool.cs class)
    //

    // Use 'tool' to work with possible null.
    private SpikeTool? tool;

    // Use 'Tool' to avoid null checking in places where the Tool must exist already.
    protected SpikeTool Tool => tool ?? throw new Exception("Tool is null");

    CGameCtnGhost? ghost;

    protected override void OnInitialized()
    {
        // GbxSelection includes what you selected in the stage before. If you want you can adjust this to have support for multi-selection.
        ghost = this.GbxSelection.FirstOrDefault()?.Object?.Node as CGameCtnGhost;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        await JSHost.ImportAsync("chartjs", "https://cdn.jsdelivr.net/npm/chart.js");
        await JSHost.ImportAsync("hammerjs", "https://cdn.jsdelivr.net/npm/hammerjs@2.0.8");
        await JSHost.ImportAsync("chartjs-plugin-zoom", "https://cdn.jsdelivr.net/npm/chartjs-plugin-zoom@2.0.1/dist/chartjs-plugin-zoom.min.js");
        await JSHost.ImportAsync(nameof(SteeringData), "../_content/Spike.Client/js/steeringdata.js");

        SteeringData.GetSteeringDataFromGhost(ghost);
    }
}
