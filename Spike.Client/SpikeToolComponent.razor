@using GBX.NET.Engines.Game;
@inject IJSRuntime JS;
@using System.Runtime.InteropServices.JavaScript;
@using Spike.Client.Modules;

@inherits ToolComponentBase

<div class="container">
    <h2>
        Spike @(typeof(SpikeTool).Assembly.GetName().Version?.ToString(3))
    </h2>
    <div class="chart-wrapper rectangle">
        <canvas id="spike-chart"></canvas>
    </div>
</div>

@code {
    // Use 'tool' to work with possible null.
    private SpikeTool? tool;

    // Use 'Tool' to avoid null checking in places where the Tool must exist already.
    protected SpikeTool Tool => tool ?? throw new Exception("Tool is null");

    GbxModel[] files = Array.Empty<GbxModel>();

    protected override void OnInitialized()
    {
        files = this.GbxSelection.ToArray();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        await JSHost.ImportAsync("chartjs", "https://cdn.jsdelivr.net/npm/chart.js");
        await JSHost.ImportAsync("hammerjs", "https://cdn.jsdelivr.net/npm/hammerjs@2.0.8");
        await JSHost.ImportAsync("chartjs-plugin-zoom", "https://cdn.jsdelivr.net/npm/chartjs-plugin-zoom@2.0.1/dist/chartjs-plugin-zoom.min.js");
        await JSHost.ImportAsync(nameof(Chart), "../_content/Spike.Client/js/steeringdata.js");

        var hasOlderTM = HasOlderTM();
        var maxSteer = hasOlderTM ? 65535 : 127;

        Chart.InitaliseChart(maxSteer);

        var counter = 0;

        // Loop through ghosts
        foreach (var file in files)
        {
            if (file.Object?.Node is CGameCtnGhost ghost)
            {
                var visualizer = new InputVisualizer(ghost, file.FileName, hasOlderTM, counter++);
                visualizer.VisualiseAsSteeringGraph();
            }

            if (file.Object?.Node is CGameCtnReplayRecord replay)
            {
                foreach (var g in replay.GetGhosts())
                {
                    var visualizer = new InputVisualizer(g, $"{file.FileName} ({g.GhostLogin})", hasOlderTM, counter++);
                    visualizer.VisualiseAsSteeringGraph();
                }
            }
        }
    }

    bool HasOlderTM()
    {
        foreach (var file in files)
        {
            if (file.Object?.Node is CGameCtnGhost ghost)
            {
                return ghost.PlayerInputs is null;
            }

            if (file.Object?.Node is CGameCtnReplayRecord replay)
            {
                foreach (var g in replay.GetGhosts())
                {
                    return g.PlayerInputs is null;
                }
            }
        }

        return false;
    }
}

